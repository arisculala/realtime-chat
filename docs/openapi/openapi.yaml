openapi: 3.0.0
info:
  title: nodejs-express-mongodb
  version: 0.0.1
servers:
  - url: 'http://localhost:3000/api'
paths:
  #------------------>> /healthcheck <<------------------
  /healthcheck/:
    get:
      tags:
        - healthcheck
      operationId: getHealthcheck
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
  /healthcheck/ready:
    get:
      tags:
        - healthcheck
      operationId: getHealthcheckReady
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckReadyLive'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckReadyLive'
  /healthcheck/live:
    get:
      tags:
        - healthcheck
      operationId: getHealthcheckLive
      responses:
        200:
          description: healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckReadyLive'
        503:
          description: unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckReadyLive'

  #------------------>> /users  <<------------------
  /users:
    post:
      tags:
        - users
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    get:
      tags:
        - users
      operationId: getAllUsers
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    patch:
      tags:
        - users
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        200:
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    delete:
      tags:
        - users
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: User deleted
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /users/{id}:
    get:
      tags:
        - users
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'

components:
  schemas:
    OK:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: 'OK'
    Healthcheck:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: >
            {{#if healthy}}
            'OK'
            {{else}}
            'Service Unavailable'
            {{/if}}
    HealthcheckReadyLive:
      type: object
      required:
        - status
        - dependencies
      properties:
        status:
          type: string
          example: >
            {{#if ready}}
            'OK'
            {{else}}
            'Service Unavailable'
            {{/if}}
        dependencies:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: 'Database'
              status:
                type: string
                example: >
                  {{#if ready}}
                  'OK'
                  {{else}}
                  'Service Unavailable'
                  {{/if}}
                description: >
                  The status of the dependency. If the service is ready, the status is 'OK'. If the service is unavailable, the status is 'Service Unavailable'.
              error:
                type: string
                example: >
                  {{#unless ready}}
                  'dial tcp [::1]:5332: connect: connection refused'
                  {{/unless}}
                description: >
                  The error message indicating the reason for the dependency being unavailable.
    CreateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: johndoe@example.com
      required:
        - firstName
        - lastName
        - email
    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: johndoe@example.com
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "663919569d1b6250f28561aa"
        firstName:
          type: string
          example: "Jhon"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "jhondoe@abc.com"
        deleted:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2024-05-06T17:54:30.570Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-05-06T17:54:30.571Z"
    UserNotFoundError:
      type: object
      properties:
        code:
          type: string
          example: "USER_NOT_FOUND_ERROR"
        status:
          type: integer
          example: 404
        message:
          type: string
          example: "User with id 663913e6e847db0b2a8d5a2a not found."
    BadRequestError:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: "Bad Request: Validation error"
        details:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              path:
                type: array
                items:
                  type: string
              type:
                type: string
              context:
                type: object
                properties:
                  label:
                    type: string
                  key:
                    type: string
    InternalServerErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 500
        message:
          type: string
          example: "The server encountered an error and could not complete your request."
        details:
          type: string
          example: "E11000 duplicate key error collection: my-mongodb-local.users index: email_1 dup key: { email: \"johndoe@example.com\" }"

  examples:
    healthcheckReadinessExample:
      value:
        status: 'OK'
        dependencies:
          - name: 'Database'
            status: 'OK'
            error: ''
    healthcheckReadinessFailExample:
      value:
        status: 'Service Unavailable'
        dependencies:
          - name: 'Database'
            status: 'Service Unavailable'
            error: 'dial tcp [::1]:5332: connect: connection refused'
